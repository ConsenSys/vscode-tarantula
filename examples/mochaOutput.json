{
 "stats": {
  "suites": 9,
  "tests": 34,
  "passes": 34,
  "pending": 0,
  "failures": 0
 },
 "tests": [
  {
   "title": "should set correct state variables",
   "fullTitle": "MasterChef should set correct state variables",
   "file": "test/MasterChef.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should allow dev and only dev to update dev",
   "fullTitle": "MasterChef should allow dev and only dev to update dev",
   "file": "test/MasterChef.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should allow emergency withdraw",
   "fullTitle": "MasterChef With ERC/LP token added to the field should allow emergency withdraw",
   "file": "test/MasterChef.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should give out SUSHIs only after farming time",
   "fullTitle": "MasterChef With ERC/LP token added to the field should give out SUSHIs only after farming time",
   "file": "test/MasterChef.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should not distribute SUSHIs if no one deposit",
   "fullTitle": "MasterChef With ERC/LP token added to the field should not distribute SUSHIs if no one deposit",
   "file": "test/MasterChef.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should distribute SUSHIs properly for each staker",
   "fullTitle": "MasterChef With ERC/LP token added to the field should distribute SUSHIs properly for each staker",
   "file": "test/MasterChef.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should give proper SUSHIs allocation to each pool",
   "fullTitle": "MasterChef With ERC/LP token added to the field should give proper SUSHIs allocation to each pool",
   "file": "test/MasterChef.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should stop giving bonus SUSHIs after the bonus period ends",
   "fullTitle": "MasterChef With ERC/LP token added to the field should stop giving bonus SUSHIs after the bonus period ends",
   "file": "test/MasterChef.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should do the migration successfully",
   "fullTitle": "Migrator should do the migration successfully",
   "file": "test/Migrator.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should allow first minting from public only after migrator is gone",
   "fullTitle": "Migrator should allow first minting from public only after migrator is gone",
   "file": "test/Migrator.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should not allow enter if not enough approve",
   "fullTitle": "SushiBar should not allow enter if not enough approve",
   "file": "test/SushiBar.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should not allow withraw more than what you have",
   "fullTitle": "SushiBar should not allow withraw more than what you have",
   "file": "test/SushiBar.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should work with more than one participant",
   "fullTitle": "SushiBar should work with more than one participant",
   "file": "test/SushiBar.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "does not allow to set bridge for Sushi",
   "fullTitle": "SushiMaker setBridge does not allow to set bridge for Sushi",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "does not allow to set bridge for WETH",
   "fullTitle": "SushiMaker setBridge does not allow to set bridge for WETH",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "does not allow to set bridge to itself",
   "fullTitle": "SushiMaker setBridge does not allow to set bridge to itself",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "emits correct event on bridge",
   "fullTitle": "SushiMaker setBridge emits correct event on bridge",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should convert SUSHI - ETH",
   "fullTitle": "SushiMaker convert should convert SUSHI - ETH",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should convert USDC - ETH",
   "fullTitle": "SushiMaker convert should convert USDC - ETH",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should convert $TRDL - ETH",
   "fullTitle": "SushiMaker convert should convert $TRDL - ETH",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should convert USDC - SUSHI",
   "fullTitle": "SushiMaker convert should convert USDC - SUSHI",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should convert using standard ETH path",
   "fullTitle": "SushiMaker convert should convert using standard ETH path",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "converts MIC/USDC using more complex path",
   "fullTitle": "SushiMaker convert converts MIC/USDC using more complex path",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "converts DAI/USDC using more complex path",
   "fullTitle": "SushiMaker convert converts DAI/USDC using more complex path",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "converts DAI/MIC using two step path",
   "fullTitle": "SushiMaker convert converts DAI/MIC using two step path",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "reverts if it loops back",
   "fullTitle": "SushiMaker convert reverts if it loops back",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "reverts if caller is not EOA",
   "fullTitle": "SushiMaker convert reverts if caller is not EOA",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "reverts if pair does not exist",
   "fullTitle": "SushiMaker convert reverts if pair does not exist",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "reverts if no path is available",
   "fullTitle": "SushiMaker convert reverts if no path is available",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should allow to convert multiple",
   "fullTitle": "SushiMaker convertMultiple should allow to convert multiple",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should have correct name and symbol and decimal",
   "fullTitle": "SushiToken should have correct name and symbol and decimal",
   "file": "test/SushiToken.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should only allow owner to mint token",
   "fullTitle": "SushiToken should only allow owner to mint token",
   "file": "test/SushiToken.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should supply token transfers properly",
   "fullTitle": "SushiToken should supply token transfers properly",
   "file": "test/SushiToken.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should fail if you try to do bad transfers",
   "fullTitle": "SushiToken should fail if you try to do bad transfers",
   "file": "test/SushiToken.test.js",
   "currentRetry": 0,
   "err": {}
  }
 ],
 "failures": [
    {
        "title": "should set correct state variables",
        "fullTitle": "MasterChef should set correct state variables",
        "file": "test/MasterChef.test.js",
        "currentRetry": 0,
        "err": {}
       },
       {
        "title": "should allow dev and only dev to update dev",
        "fullTitle": "MasterChef should allow dev and only dev to update dev",
        "file": "test/MasterChef.test.js",
        "currentRetry": 0,
        "err": {}
       },
       {
        "title": "should allow emergency withdraw",
        "fullTitle": "MasterChef With ERC/LP token added to the field should allow emergency withdraw",
        "file": "test/MasterChef.test.js",
        "currentRetry": 0,
        "err": {}
       },
       {
        "title": "should give out SUSHIs only after farming time",
        "fullTitle": "MasterChef With ERC/LP token added to the field should give out SUSHIs only after farming time",
        "file": "test/MasterChef.test.js",
        "currentRetry": 0,
        "err": {}
       },
       {
        "title": "should not distribute SUSHIs if no one deposit",
        "fullTitle": "MasterChef With ERC/LP token added to the field should not distribute SUSHIs if no one deposit",
        "file": "test/MasterChef.test.js",
        "currentRetry": 0,
        "err": {}
       }
 ],
 "passes": [
  
  {
   "title": "should distribute SUSHIs properly for each staker",
   "fullTitle": "MasterChef With ERC/LP token added to the field should distribute SUSHIs properly for each staker",
   "file": "test/MasterChef.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should give proper SUSHIs allocation to each pool",
   "fullTitle": "MasterChef With ERC/LP token added to the field should give proper SUSHIs allocation to each pool",
   "file": "test/MasterChef.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should stop giving bonus SUSHIs after the bonus period ends",
   "fullTitle": "MasterChef With ERC/LP token added to the field should stop giving bonus SUSHIs after the bonus period ends",
   "file": "test/MasterChef.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should do the migration successfully",
   "fullTitle": "Migrator should do the migration successfully",
   "file": "test/Migrator.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should allow first minting from public only after migrator is gone",
   "fullTitle": "Migrator should allow first minting from public only after migrator is gone",
   "file": "test/Migrator.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should not allow enter if not enough approve",
   "fullTitle": "SushiBar should not allow enter if not enough approve",
   "file": "test/SushiBar.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should not allow withraw more than what you have",
   "fullTitle": "SushiBar should not allow withraw more than what you have",
   "file": "test/SushiBar.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should work with more than one participant",
   "fullTitle": "SushiBar should work with more than one participant",
   "file": "test/SushiBar.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "does not allow to set bridge for Sushi",
   "fullTitle": "SushiMaker setBridge does not allow to set bridge for Sushi",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "does not allow to set bridge for WETH",
   "fullTitle": "SushiMaker setBridge does not allow to set bridge for WETH",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "does not allow to set bridge to itself",
   "fullTitle": "SushiMaker setBridge does not allow to set bridge to itself",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "emits correct event on bridge",
   "fullTitle": "SushiMaker setBridge emits correct event on bridge",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should convert SUSHI - ETH",
   "fullTitle": "SushiMaker convert should convert SUSHI - ETH",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should convert USDC - ETH",
   "fullTitle": "SushiMaker convert should convert USDC - ETH",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should convert $TRDL - ETH",
   "fullTitle": "SushiMaker convert should convert $TRDL - ETH",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should convert USDC - SUSHI",
   "fullTitle": "SushiMaker convert should convert USDC - SUSHI",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should convert using standard ETH path",
   "fullTitle": "SushiMaker convert should convert using standard ETH path",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "converts MIC/USDC using more complex path",
   "fullTitle": "SushiMaker convert converts MIC/USDC using more complex path",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "converts DAI/USDC using more complex path",
   "fullTitle": "SushiMaker convert converts DAI/USDC using more complex path",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "converts DAI/MIC using two step path",
   "fullTitle": "SushiMaker convert converts DAI/MIC using two step path",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "reverts if it loops back",
   "fullTitle": "SushiMaker convert reverts if it loops back",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "reverts if caller is not EOA",
   "fullTitle": "SushiMaker convert reverts if caller is not EOA",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "reverts if pair does not exist",
   "fullTitle": "SushiMaker convert reverts if pair does not exist",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "reverts if no path is available",
   "fullTitle": "SushiMaker convert reverts if no path is available",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should allow to convert multiple",
   "fullTitle": "SushiMaker convertMultiple should allow to convert multiple",
   "file": "test/SushiMaker.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should have correct name and symbol and decimal",
   "fullTitle": "SushiToken should have correct name and symbol and decimal",
   "file": "test/SushiToken.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should only allow owner to mint token",
   "fullTitle": "SushiToken should only allow owner to mint token",
   "file": "test/SushiToken.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should supply token transfers properly",
   "fullTitle": "SushiToken should supply token transfers properly",
   "file": "test/SushiToken.test.js",
   "currentRetry": 0,
   "err": {}
  },
  {
   "title": "should fail if you try to do bad transfers",
   "fullTitle": "SushiToken should fail if you try to do bad transfers",
   "file": "test/SushiToken.test.js",
   "currentRetry": 0,
   "err": {}
  }
 ]
}